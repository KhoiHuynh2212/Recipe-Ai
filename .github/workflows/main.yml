name: AI Recipe App CI/CD

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test

  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test

  test-ai-model:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai_model
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Run linting
      run: flake8 . --count --max-line-length=120 --statistics
    
    - name: Run tests
      run: pytest tests/ --cov=./ --cov-report=xml

  deploy:
    needs: [test-frontend, test-backend, test-ai-model]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build and push frontend
        docker build -t $ECR_REGISTRY/recipe-app-frontend:${{ github.sha }} ./frontend
        docker push $ECR_REGISTRY/recipe-app-frontend:${{ github.sha }}
        
        # Build and push backend
        docker build -t $ECR_REGISTRY/recipe-app-backend:${{ github.sha }} ./backend
        docker push $ECR_REGISTRY/recipe-app-backend:${{ github.sha }}
        
        # Build and push AI model
        docker build -t $ECR_REGISTRY/recipe-app-ai:${{ github.sha }} ./ai_model
        docker push $ECR_REGISTRY/recipe-app-ai:${{ github.sha }}
    
    - name: Update ECS services
      run: |
        aws ecs update-service --cluster recipe-app-cluster --service recipe-app-frontend --force-new-deployment
        aws ecs update-service --cluster recipe-app-cluster --service recipe-app-backend --force-new-deployment
        aws ecs update-service --cluster recipe-app-cluster --service recipe-app-ai --force-new-deployment
